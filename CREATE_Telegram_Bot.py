# СОЗДАНИЕ ТЕЛЕГРАМ-БОТА

# Для того, чтобы создать бота, есть… бот :) Напишите в приложении "Telegram" @BotFather
# и выполните несколько простых шагов:
#
# Используйте команду /newbot, чтобы создать нового бота.
#
# Затем необходимо:
#
# 1. Установить имя (name) вашего бота.
# Оно отображается в контактной информации и в других местах.

# 2. Установить имя пользователя (username) вашего бота.
# Имя пользователя — это короткое имя, которое будет использовать для идентификации вашего бота и обращению к нему.
# Имена пользователей состоят из 5–32 символов и нечувствительны к регистру,
# могут включать только латинские символы, числа и символы подчёркивания.
# Имя пользователя вашего бота должно заканчиваться на «bot», например, «tetris_bot» или «TetrisBot».

# 3. Получить токен (token).
# Токен представляет собой строку вида 110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw.
# Он необходим для авторизации (подтверждения, что именно вы владелец этого бота,
# чтобы в программе было понятно, к какому именно боту привязываются все обработчики) вашей программы,
# в которой реализована логика бота. Токен — это пароль от вашего бота, поэтому храните свой токен в безопасности.


# После того, как у вас есть токен для доступа к боту, можно приступать к созданию скрипта,
# который будет реализовывать всю логику Telegram-бота.

# Первое, с чем необходимо ознакомиться, это доступная информация о чатах.
# API Bot даёт доступ к множеству объектов, с которыми он работает.
# Например, чат и сообщения.

# Все сообщения в Telegram приходят в какой-либо чат. Чтобы его идентифицировать, например, для того,
# чтобы отправить ответное сообщение, необходимо знать его id.
# Также можно определить тип чата и реализовать различную логику для моментов,
# когда бот будет использоваться в личных сообщениях или групповых чатах.
# Username может использоваться для приветствия и обращения к пользователю.

# Зная id сообщения, можно отправить ответ именно на это сообщение.
# Отправителя можно использовать для персонализированного ответа.
# Чат нужен, чтобы понять, куда отправить ответ.
# Поле с текстом позволяет анализировать и обрабатывать сообщения и команды, отправленные пользователем.
#
# Сообщения могут содержать контент следующих типов:
# audio — аудиозапись;
# photo — фотография, картинка;
# voice — голосовое сообщение;
# video — видеозапись;
# document — документ;
# text — текстовое сообщение;
# location — геолокация;
# contact — контакт;
# sticker — стикер.

# Можно реализовать различную обработку сообщений с соответствующим контентом.

# Чтобы взаимодействовать с этими объектами, в Python есть специальная библиотека pyTelegramBotAPI.
# Установить её вы можете с помощью команды:
#
# pip3 install pyTelegramBotAPI
#
# После установки необходимо создать новый файл, импортировать туда модуль telebot и создать объект bot,
# используя токен, полученный при регистрации.

import telebot

TOKEN = "Токен, полученный при регистрации"

bot = telebot.TeleBot(TOKEN)

# Чтобы запустить бота, нужно воспользоваться методом polling.
bot.polling(none_stop=True)

# Параметр none_stop=True говорит, что бот должен стараться не прекращать работу при возникновении каких-либо ошибок.

# Обработчик сообщений — это функция, которая будет выполняться при получении определённого сообщения.
# Для того, чтобы из обычной функции сделать обработчик сообщений для бота,
# надо воспользоваться декоратором @bot.message_handler.
# Обработчики сообщений состоят из одного или нескольких фильтров.
#
# Обработчик сообщений объявляется следующим образом (при условии, что bot — это экземпляр класса TeleBot):

import telebot

TOKEN = "Токен полученный при регистрации"

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(filters)
def function_name(message):
    bot.reply_to(message, "This is a message handler")

# filters — фильтры, определяющие, следует ли вызывать декорированную функцию для соответствующего сообщения или нет.
# У одного обработчика может быть несколько фильтров. Например, тип контента и команды.

# Для обработчиков сообщений разрешено любое имя функции, поэтому function_name может принимать любое значение.
# Функция должна принимать не более одного аргумента — сообщения, которое функция должна обработать.

import telebot

bot = telebot.TeleBot("TOKEN")


# Обрабатываются все сообщения, содержащие команды '/start' or '/help'.
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    pass


# Обрабатываются все документы и аудиозаписи
@bot.message_handler(content_types=['document', 'audio'])
def handle_docs_audio(message):
    pass
